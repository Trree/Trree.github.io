<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Steam</title>
    <link>https://trree.github.io/geek/tags/tech/</link>
    <description>Recent content in Tech on Steam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Released under the MIT license.</copyright>
    <lastBuildDate>Thu, 27 Jul 2017 20:06:27 +0000</lastBuildDate>
    
	<atom:link href="https://trree.github.io/geek/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>openvpn简述</title>
      <link>https://trree.github.io/geek/posts/openvpn/</link>
      <pubDate>Thu, 27 Jul 2017 20:06:27 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/openvpn/</guid>
      <description>前置知识 TCP/IP网络，IP路由
VPN与OpenVPN VPN是一种实现虚拟专用网的技术。 典型的实现有IPSec，L2TP，PPTP等，各类OS都有相应的支持，开源的轻量级实现有OpenVPN。
OpenVPN OpenVPN实现了一个灵活的VPN，和通过修改协议栈而实现的基于IPSec的VPN相比，OpenVPN有以下的优点：
 OpenVPN无需对协议栈进行任何修改，无需专门的策略来解决VPN数据穿越NAT的问题，因此可在现有的网络进行规划； OpenVPN使用虚拟网卡和路由进行虚拟网络的构建，配置十分方便； OpenVPN使用SSL协议对虚拟网络提供保护，从而实现“专用”，而SSL提供了丰富灵活的安全特性； OpenVPN的push模式可以最大限度简化客户端配置，服务器和客户端可以不必花费太多的精力来使得两端一致。 OpenVPN实际上是虚拟网卡设备，TCP/IP网络技术，路由技术，SSL结合而成的一个应用，前三者构建了虚拟网络—隧道连接的网络，最后的SSL保证了虚拟网络通信的安全——隧道通信的认证和加密，因此使用OpenVPN的过程基本就是对上述四方面进行配置的过程。  数据流  OpenVPN 协议  OpenVPN连接建立  OpenVPN协议解析-网络结构之外
关键概念 虚拟网卡——OpenVPN最重要的概念 虚拟网卡 TUN/TAP 驱动程序设计原理
虚拟网卡可以看作是一个连接协议栈底层和用户态应用程序的一个管道，数据从虚拟网卡流出，进入应用程序，封装后发出，如下图所示：
IP路由 IP路由在OpenVPN中起着至关重要的作用，数据包之所以能被截获进而被加密，完全靠IP路由
OpenVPN服务端配置实例 #执行外部程序的安全等级 script-security 2 #虚拟网卡设备：tun封装三层IP数据报，tap封装二层以太帧，支持非IP协议 dev tap #使用的封装协议：tcp与udp proto udp #SSL握手时的角色 tls-server tls-cipher RC4-MD5 cipher BF-CBC #心跳保活 keepalive 1 5 #模式：p2p-仅两端端点；server-一个server可以被多个client连接 mode server #虚拟IP地址池 server 128.129.0.0 255.255.0.0 #本地侦听地址和端口 local 0.0.0.0 port 6119 #日志等级 verb 4 dh dh1024.pem.dh.conf #配置证书链 ca sslvpn.</description>
    </item>
    
    <item>
      <title>restful 接口设计</title>
      <link>https://trree.github.io/geek/posts/restful/</link>
      <pubDate>Fri, 09 Jun 2017 18:20:03 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/restful/</guid>
      <description>最近在工作中需要实现一个跨平台，易实现，方便调试排错的接口。 经过考虑之后，发现restful接口是非常合适的。
接口的实现是基于c++的boost的。所以有两个非常重要的boost库需要介绍一下。
首先我们需要想想我们需要怎样的借口调用方式，健壮的，易扩展的。
RequestHandler requesthandler; requesthandler.set_handler(&amp;quot;sessions&amp;quot;) .get(boost::bind(&amp;amp;handle_sessions_get_method, _1, _2)) .post(boost::bind(&amp;amp;handle_sessions_post_method, _1, _2, boost::ref(vm))) .put(boost::bind(&amp;amp;handle_sessions_put_method, _1, _2)) .del(boost::bind(&amp;amp;handle_sessions_delete_method, _1, _2));  我们在这个接口中注册请求处理函数，分别处理 get，post，put，delete请求。
Q1：为什么所有的method请求是连接在一起的？ 我们需要保持source的唯一性，一个source只能被声明一次，
/* -&amp;gt; 表示 key-&amp;gt;value 的数据结构 */ source: sessions action: get ,post, put, del callback: handle_sessions_*_method ++++++++++++++++++++++++++++++++++++++++++++ +++++++++++++ | get -&amp;gt; handle_sessions_get_method | | sessions | ---&amp;gt; | post -&amp;gt; handle_sessions_get_method | +++++++++++++ | put -&amp;gt; handle_sessions_put_method | | del -&amp;gt; handle_sessions_delete_method | ++++++++++++++++++++++++++++++++++++++++++++  整个的调用就是两个 key-&amp;gt; value 的形式</description>
    </item>
    
    <item>
      <title>Apache 压力测试后的大量本地连接</title>
      <link>https://trree.github.io/geek/posts/20170520/</link>
      <pubDate>Sat, 20 May 2017 13:32:10 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/20170520/</guid>
      <description>在对Apache（prefork多进程模式）进行压力测试对时候， 发现一旦停止压力测试对时候。 会出现非常多的本地连接 背景 在对Apache（prefork多进程模式）进行压力测试对时候， 客户端IP：192.168.41.96 网关IP和端口; 0.0.0.0:447 发现一旦停止压力测试对时候。 使用 netstat -an | grep 127 会出现非常多的 127.0.0.1:447 连接
tcp 0 0 127.0.0.1:38984 127.0.0.1:447 TIME_WAIT tcp 0 0 127.0.0.1:38994 127.0.0.1:447 TIME_WAIT  查看的时候连接都已经是 TIME_WAIT 的状态，无法查看它是通过哪些进程查看它建立连接。 我们怀疑这些连接可能对性能会有影响。 所以对这个问题进行了排查。
问题解决 因为所有的127.0.0.1的端口都与447端口断开连接，又因为这些无法有效都用gdb调试。 所以使用 strace 的方式跟踪进程。
 strace -p 683 -o filename_childpid strace -p 899 -o filename_masterpid
 filename_childpid 是在压力测试的时候临时创建出来的子进程 filename_masterpid 是Apache的主进程
在压力测试时候出现的子进程中可以看到
accept(3, {sa_family=AF_INET, sin_port=htons(36448), sin_addr=inet_addr(&amp;quot;127.0.0.1&amp;quot;)}, [16]) = 6 getsockname(6, {sa_family=AF_INET, sin_port=htons(447), sin_addr=inet_addr(&amp;quot;127.0.0.1&amp;quot;)}, [16]) = 0  发现这个子进程是accept了连接。但是这些环回地址是如何产生的？</description>
    </item>
    
    <item>
      <title>问问题</title>
      <link>https://trree.github.io/geek/posts/ask-question/</link>
      <pubDate>Sat, 06 May 2017 19:47:33 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/ask-question/</guid>
      <description> 在问问题之前不需要问在不在，一般上班时间并且头像是亮着的话人是在的。 这个项目的背景是怎样的？问题是在什么时候产生的，是在部署的时候还是网关在运行的时候产生的，如果是网关在运行的时候产生的，那么在之前有没有进行过什么操作。需要能够描述问题产生原因。而不是只是描述一个结果。 问题能否重现，重现的方法是什么，如果不能重现，说明不能重现的理由。（在自己电脑中使用虚拟机搭建网关的环境） 提供网关的版本号，升级包记录等相关信息。 需要时要能够使用tcpdump到网关后台抓包。平时需要学会使用tcpdump和wireshare等简单的工具。 简单的学会一些linux的命令行，vim等操作。 问问题之前先参考wiki或者FAQ上是否存在类似的问题。 学会怎么问问题。提供以上信息，并且能够一次性把问题描述清楚。  </description>
    </item>
    
    <item>
      <title>系统内存不足</title>
      <link>https://trree.github.io/geek/posts/outofmemory/</link>
      <pubDate>Thu, 27 Apr 2017 10:22:15 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/outofmemory/</guid>
      <description>有时候我们会面临一些非常情况的现象， 没有异常的情况下进程无缘无故的退出， 无法写如日志文件。 非常奇怪的错误抛出在终端。 现象及分析 有时候我们会面临一些非常情况的现象， 没有异常的情况下进程无缘无故的退出， 无法写如日志文件。 非常奇怪的错误抛出在终端。
这个时候就需要查看一下系统日志 kern.log 了。
MAIN kernel: [17832.300370] [&amp;lt;c1090380&amp;gt;] ? oom_kill_process+0x60/0x201 MAIN kernel: [17832.300408] [&amp;lt;c10908fd&amp;gt;] ? __out_of_memory+0xf4/0x107 MAIN kernel: [17832.300445] [&amp;lt;c109096a&amp;gt;] ? out_of_memory+0x5a/0x7c MAIN kernel: [17832.300482] [&amp;lt;c109322c&amp;gt;] ? __alloc_pages_nodemask+0x3ef/0x4d9 MAIN kernel: [17832.300522] [&amp;lt;c109460d&amp;gt;] ? __do_page_cache_readahead+0x98/0x16b MAIN kernel: [17832.300562] [&amp;lt;c10946f4&amp;gt;] ? ra_submit+0x14/0x18 MAIN kernel: [17832.300597] [&amp;lt;c108ec9a&amp;gt;] ? filemap_fault+0x16d/0x2e6 MAIN kernel: [17832.300634] [&amp;lt;c10a0c9a&amp;gt;] ? __do_fault+0x53/0x3fb MAIN kernel: [17832.300670] [&amp;lt;c10a2f56&amp;gt;] ? handle_mm_fault+0x4d1/0xa22 MAIN kernel: [17832.300708] [&amp;lt;c1144ae3&amp;gt;] ?</description>
    </item>
    
    <item>
      <title>TCP 握手</title>
      <link>https://trree.github.io/geek/posts/tcp-handshark/</link>
      <pubDate>Tue, 28 Mar 2017 21:44:05 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/tcp-handshark/</guid>
      <description>tcp 报头的各个字段的作用 想象一下自己去设计一个TCP协议，最中的是保证可靠性。因为每个报文都是要包含这些字段，所以你要怎么保证它的简洁性，不浪费资源。 source port: 源端口 destination port: 目标端口 sequence number: 序号，每一个TCP报文段都会有一个序列，序列号字段段值其实是本报文段所发送段第一个字节的序号，通过序号来确保服务的可靠性和有序性。 ack number:确认号 Data offset:数据偏移 Reserved:保留字段 URG(urgent)：紧急指针 ACK ：确认字段 PSH：推送字段 RST：复位字段 SYN：同步字段 FIN：终止字段 Windows size：窗口大小 checksum：检验和 Urgent pointer：紧急指针 options：选项  tcp 三次握手 为什么tcp握手需要三次？这个保证了什么东西？
 客户端发送一个 SYN 给服务端。 服务端返回一个ack和syn给客户端确认。 客户端在返回一个ack确认。tcp连接建立。  如果只有两次握手会怎样？ 客户端发送了一个连接请求的SYN，但是由于网络问题，以至这个连接释放之后才到达服务端， 这时候服务器发送 ack 和 syn 给客户端。 如果此时就建立连接，由于客户端已经废弃了这个 SYN，所以这个连接客户端什么 都不会发送，白白浪费了资源。
DDoS攻击的也有相似的原理
 为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。
 tcp 四次挥手  客户端发送一个 FIN 给服务端 服务端发送一个ACK 确定 服务端再发送一个 FIN 接收服务端的连接 客户端发送 ACK 确定后关闭连接  半连接的时候是怎么处理的？ 为什么要四次握手？ time_wait 的作用是什么？危害是什么？</description>
    </item>
    
    <item>
      <title>apache多种debug调试方式</title>
      <link>https://trree.github.io/geek/posts/apache-debug/</link>
      <pubDate>Wed, 22 Mar 2017 20:02:01 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/apache-debug/</guid>
      <description> 将正在测试的机器上都打开 coredump，等待重现
 在linux系统中执行 ulimit -c unlimited 配置文件中添加 CoreDumpDirectory directory  尝试 valgrind 追踪内存错误
 valgrind &amp;ndash;tool=memcheck &amp;ndash;leak-check=yes &amp;ndash;show-reachable=yes &amp;ndash;error-limit=no apache  strace 调试 - strace -f -p pid
 尝试用 gdb 启动，等待重现 - 使用gdb启动服务，直接run，等待进程崩溃
 apache信号调试
 gdb attach进主线程或者需要的线程 breakpoints continue 访问服务或者发信号 gdb接收信号，然后continue 调试   </description>
    </item>
    
    <item>
      <title>thread</title>
      <link>https://trree.github.io/geek/posts/thread/</link>
      <pubDate>Sun, 12 Feb 2017 14:57:05 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/thread/</guid>
      <description>只要我时间了，我就把这本书看完。 如果我有很多钱，我就要去全世界旅游。  总是喜欢信誓旦旦的对别人说着一些话， 不知道最后多少人达成了目标。 就像小时候想要的那个模型。 现在可以轻而易举的买下小时候的想要的任何东西。 可是突然失去了对这件事情的乐趣。 时间与环境的变化，那么事情本事早就失去了它原本的意义。
太多时候总喜欢用如果只要达到什么条件， 那么我就要做什么。喜欢把生活一步一步的规划， 达到一个目标之后，才开始进行下一步。 如果有一步陷入了困境，那么就一直阻塞在那一步。
计算机人员在解释多核的时候，喜欢用一个人在多项任务 之间切换得够快，那么像是在同时处理多件事情一样。 但是我们不能像孙悟空或者技术总监一样分身。分配人员 同时处理不同的事情。
但是可以像线程一样。 在保证主线程正常运行的时候， 使用多线程的方法，从现在慢慢就开始做自己喜欢的事情。 但是也要保证线程安全。
refer: thread</description>
    </item>
    
    <item>
      <title>Apache内存管理</title>
      <link>https://trree.github.io/geek/posts/apache-pool/</link>
      <pubDate>Mon, 06 Feb 2017 19:47:33 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/apache-pool/</guid>
      <description>Apache 提供了自己的内存和资源管理方式，称作内存池，内存池在apache中任何一个阶段被使用，所以也被外部模块使用。 内存池可以管理内存，Sockets 和进程等服务系统所有的资源。 内存池的使用可以降低程序设计错误的可能性。在程序中如果由于疏忽或错误造成程序未能释放已经不再使用的内存，造成内存泄露。 内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制， 从而造成了内存的浪费，其它的程序就不能够再使用这个内存段。
客户端的程序因为运行不是非常长时间，退出后操作系统会自动释放资源，所以不是造成太大的危害。但是在服务端端程序由于长期运行， 即使是一点地内存泄漏由于长期内存泄露造成服务端的崩溃。
尤其需要注意Sockets。如果建立了一个Socket，但是在业务完成时没有释放它，那么其它的程序就不能使用这块内存。这些不断建立但 是未释放的Sockets会造成内存，CPU被占满。此时服务端一定会崩溃。许多服务端现在基本都是以多线程或者多进程的方式工作，这些 进程或者线程如果不按设计退出只能被管理员中断。如果一个程序不停止运行，那么服务端端资源会被立马占满并且崩溃。
随着内存池的使用，开发者可以在一个已知生命周期的内存池中使用内存，sockets和进程。一旦这个内存池被摧毁，那么所有的资源都 会自动的释放。这样就只有一些仔细考虑后额外的例程才会需要考虑释放内存的事情。这样就变得更简单明了，减少了开发者的负担。
重要的是，内存池可以提升服务器的性能。通常一个程序使用和释放内存，由于系统需要从虚拟内存中分配和释放内存，这些会造成 许多的开销，这将显著的降低性能。并且，不管请求了多少内存，系统通常分配一个最小数量的空间。 那么这将造成许多小的内存空间被浪费。经常这样做的话，那么你需要关注这些小内存的价值了.
内建池和生命周期 Apache内建的内存池都有不同的生命周期，如上图所示，该图描述了池的继承的层次结构。pglobal存在于服务器的真个运行周期， pchaild存在于整个子虚拟机主机的生命周期，pconn是每一个连接的生命周期，preq是每一个请求的生命周期。通常开发者使用 最小的生命周期最小存储空间最小存放数据。
如果开发者需要一个非常大的内存空间，而且没有一个合适生命周期的内存池。一个任意内建池的子池可以被创建。程序可以像 内建池一样使用这个内存池，也可以在不需要这个内存池的时候释放它。如果忘记了释放这个内存池，那么在它的父池被释放的 时候它会被自动释放。释放pglobal的时候，所以的子池都将被自动释放。每一个连接池是子服务池处理连接，所有的请求池都 是对应了连接池。
内存池的内部结构 如上图所示，一个池内部链接了一系列的子池，数据块，进程和回调函数。如果需要分配内存需要使用预定义的函数。这些函数 不只是分配内存，并且也可以释放内存。同样的进程也可以通过内存池建立，内存释放的时候进程结束。此外，每个池可以保存 关于在销毁所有存储器之前被调用的函数的信息。这样文件处理程序和套接字都可以注册一个池去销毁它。
当一个内存池被销毁的时候，apache首先回调清理函数。所有注册的文件句柄和Sockets将被关闭。之后，池讲终止所有的注册 和进程。这些结束之后，数据块就被释放。通常apache并不是真的释放被其它程序使用的内存。而是将它从池中删除，将这段 内存放入空闲的内存块中。这样就将分配和释放内存的消耗降至最低。内核将立即分配这些空闲的内存。只有在池中所有的内 存都用完时才需要分配新的空间。
refer: Memory_resource</description>
    </item>
    
    <item>
      <title>重复</title>
      <link>https://trree.github.io/geek/posts/repetition-work/</link>
      <pubDate>Sun, 05 Feb 2017 22:36:33 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/repetition-work/</guid>
      <description>想想你去年重复了哪些工作，哪些工作占用了你的大量时间， 技术支持的时候是对方没有描述清楚问题，还是自己没有理解好问题。 是对方在现场操作太慢，还是自己提供的文档不够齐全。
在工作的时候哪些场景会让你不开心，不开心的原因是什么， 是因为事情本身，还是这种交互之间占据了太多时间，是对方的原因，还是自己没有讲清楚的原因。
什么场景下你会感到非常的烦躁，是因为工作事情本身的原因， 还是没有休息好的原因。
什么东西会影响你工作的效率，突然的电话的打扰，消息，邮箱的打扰。 身边同事的打扰，什么打扰你可以忍受，什么打扰你不可以忍受。 什么东西会促进你的工作效率，在工作的时候听音乐可以促进你的工作效率吗？ 在什么情况下你需要音乐去促进你的效率。 还有什么硬件或者软件可以促进你的效率，你有争取去改进你的原有的什么方式吗？</description>
    </item>
    
    <item>
      <title>自测网关安全性</title>
      <link>https://trree.github.io/geek/posts/gateway-s-safe/</link>
      <pubDate>Thu, 20 Oct 2016 17:28:16 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/gateway-s-safe/</guid>
      <description>网关的主要作用是转换原B/S，C/S系统的协议，将原来未加密的协议转换成加密的协议。 在这里网关将未加密的HTTP协议或者TCP协议转换成SSL协议。 任何一个增加的系统都会增加安全性的问题，作为一款加密产品，那么它更应该注重自生的安全性问题。
 IP和端口扫描(nmap，netcat) 对访问用户压测，看看有大量用户访问时是否会断开连接(burpsuit, ab, loadrunner) 查看每一个连接中的关键数据是否加密 传输的数据是否加密 对文件上传和下载是否满足用户权限的要求，是否保护 对shell和sql是否防止注入 对网关的系统和服务器进行安全性扫描  </description>
    </item>
    
    <item>
      <title>自述Tcp超时与重传</title>
      <link>https://trree.github.io/geek/posts/net-tcp/</link>
      <pubDate>Sun, 16 Oct 2016 11:02:39 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/net-tcp/</guid>
      <description>将tcp的超时与重传的文档太多了，我也是从tcp/ip详解这本书上学习了。所以如果你对这个不熟悉， 希望你先看书，不然基于我自己的理解，很容易让人误解。 但是如果有大神，如果有什么写错，或者理解错误的东西，希望指出，不胜感激。
tcp的超时设置是为了防止网络问题和节省时间之间的一个平衡， 如果不设置超时，当一个ack没有获取，那么此时直接返回网络错误。 重传是为了防止偶然的网络问题。超时的时间间隔大部分都是指数间隔， 而不是线性的。
tcp的所有超时的地方，从第一个客户端读取 syn ＋ ack 超时， 超时与重传 connect 超时 响应超时 读写超时 timewait超时
超时重传机制 哪些会超时，哪些直接发送reset断开连接或者超时多长。</description>
    </item>
    
    <item>
      <title>一个偶然的arp网络错误</title>
      <link>https://trree.github.io/geek/posts/net-arp/</link>
      <pubDate>Sun, 16 Oct 2016 11:02:27 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/net-arp/</guid>
      <description>在网络的使用中这个是我们比较少关注的一个协议， 它是用来查看ip地址和mac地址的对应关系。
一般情况下网络问题很少出现在这个地方。而且如果查看这个值出现问题的时候， 一般是上层的协议出现了问题，或者就是整个网络出现了问题。
但是今天需要讲述一个比较特殊的情况下arp的网络问题。 问题的起源是我使用openvpn搭建一个client-to-client 的环境。 就是使用一台openvpn的服务器，然后使用两台openvpn的客户端去连接openvpn的服务器。 我在openvpn中配好 client-to-client 选项后， 然后两台openvpn的客户端可以ping通服务端，也可以看到下发的策略。 但是在两台客户端的中相互ping对方，却是不通的。 查看ip和tcp，都是正常的。没有检查到异常，但是一直都是不通的。
最后没有办法，只能按照网络协议层一层一层的往下去分析。 在windows的cmd下，查看路由 route print。路由正常。 ip和端口正常，ip层和tcp层都是正常的。 使用arp -a的指令，得到
arp -a 172.16.0.2 ether 00:ff:90:4e:20:cc C tap0 172.16.0.3 ether 00:ff:90:4e:20:cc C tap0  172.16.0.0/16 是虚拟IP的地址，第三项是对应的Mac地址， 所以到链路层之后，有两个相同的mac地址。 所以从mac地址转换成IP地址的时候丢失了IP地址。所以一直访问不通。
为什么会有两个相同的mac地址呢？第二个openvpn的客户端是直接复制第一个 openvpn的虚拟机。所以出现了两个相同的mac地址。修改其中一个虚拟IP的mac地址 之后就可以相互ping通对方了。
如果想重现问题，可以将两个IP地址改成相同的mac地址，查看一下你的那边会出现什么情况。
###虚拟IP
arp -a 192.168.41.97 ether 00:0C:29:EB:70:DA C eth0 192.168.41.92 ether 00:0C:29:EB:70:DA C eth0  有时候我们可以在同一台机器上看到两个IP有相同的物理地址。 traceroute 这两个IP都是正常的，可以访问的。 没有出现上面不能访问的情况。
         MAC destination MAC source   Source Address Destination Address(ip/Virtual_ip)   MAC destination MAC source    在这种情况下主机中发出的数据中包含了目标地址的IP，所以可以正常到达目标主机。 但是如果是两个Mac相同，发送apr的tell数据包的时候，会有两个地方都会响应， 那么就会造成Mac地址冲突了。</description>
    </item>
    
    <item>
      <title>绑定Apache信息</title>
      <link>https://trree.github.io/geek/posts/apache-info/</link>
      <pubDate>Sun, 16 Oct 2016 11:02:11 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/apache-info/</guid>
      <description>在apache的使用中，如果是一个apache代理服务器，并且使用的证书的话， 我们不可避免的需要将从前端和证书中的信息传递给后端处理。 一般情况下，我们都是将这些信息绑定在http头中，cookie项中，这样后端比较容易处理。
幸运的是，apache为我们提供了这么一个可选函数，可以任何的一个模块中获取 你需要的信息。 这个可选函数是在模块 mod_nw_ssl 中定义。 &amp;gt;APR_REGISTER_OPTIONAL_FN(ssl_var_lookup);
可选函数
[apache 可选函数原理]()
可选函数实现
声明
APR_DECLARE_OPTIONAL_FN(char *, ssl_var_lookup, ​ (apr_pool_t *, server_rec *, ​ conn_rec *, request_rec *, ​ char *));  实现
 char *ssl_var_lookup(apr_pool_t *p, server_rec *s, conn_rec *c, request_rec *r, char *var)
 注册
 APR_REGISTER_OPTIONAL_FN(ssl_var_lookup);
 获取
 static APR_OPTIONAL_FN_TYPE(ssl_var_lookup) *pfn_ssl_lookup = NULL; pfn_ssl_lookup = APR_RETRIEVE_OPTIONAL_FN(ssl_var_lookup);
 调用
if (pfn_ssl_lookup) { server_rec *s = r-&amp;gt;server ? r-&amp;gt;server : c-&amp;gt;base_server; value = pfn_ssl_lookup(pool, s, c, r, var); }  信息绑定原理</description>
    </item>
    
    <item>
      <title>Apache 超时设置</title>
      <link>https://trree.github.io/geek/posts/timeout/</link>
      <pubDate>Sun, 16 Oct 2016 11:01:53 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/timeout/</guid>
      <description>在apache的使用过程中，我们可以看到许多的超时设置， 因为apache是一个web服务器，所以它的超时是包含底层的超时设置，例如tcp协议的。 所以这一篇文档包含http，ssl，tcp等协议的超时设置。
 timeout tcp读写超时(wait_for_io_or_timeout)
 t &amp;gt; 0 &amp;ndash; read and write calls return APR_TIMEUP if specified time elapsess with no data read or written t == 0 &amp;ndash; read and write calls never block t &amp;lt; 0 &amp;ndash; read and write calls block  keepalivetimeout
 在keepalivetimeout时间后没有子请求，断开连接(ap_process_http_connection)  proxytimeout
 没有设置的时候与 timeout 的一样  RequestReadTimeout（reqtimeout_init）
 设置读取http头和http正文最大和最小超时时间  默认值：
 MRT_DEFAULT_HEADER_TIMEOUT 20 MRT_DEFAULT_HEADER_MAX_TIMEOUT 40 MRT_DEFAULT_HEADER_MIN_RATE 500 MRT_DEFAULT_BODY_TIMEOUT 20 MRT_DEFAULT_BODY_MAX_TIMEOUT 0 MRT_DEFAULT_BODY_MIN_RATE 500  SSLSessionCacheTimeout</description>
    </item>
    
    <item>
      <title>PHP Session超时设置</title>
      <link>https://trree.github.io/geek/posts/php-session/</link>
      <pubDate>Sun, 16 Oct 2016 11:01:02 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/php-session/</guid>
      <description>PHP控制session的方法 环境：PHP的session控制使用crond定时检查 debian3， ubuntu14.0.4
PHP的session文件保存在 /var/lib/php5 中，如果是使用cookie保存session的方法， 可以在浏览器中查看cookie，查看两个值是不是一样的。 如果你手动清除这个文件，登陆页面马上放回到你需要跳转的页面。 所以对session时间的控制就是对删除session文件时间的控制。
删除session文件是使用 首先查看 /etc/cron.d/php5 的文件
 09,39 * * * * root [ -d /var/lib/php5 ] &amp;amp;&amp;amp; find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -r -0 rm
 从这里可以看出系统定时检查session文件的修改时间，一旦超出maxlifetime，就将它删除。 所以最后的控制就在 /usr/lib/php5/maxlifetime 中。
我们查看这个文件做了什么事情 这个文件中默认最大超时时间为 1440 秒，然后与 /etc/php5/*/php.ini 的session.gc_maxlifetime 时间比较，哪个大取哪个值。 在 /etc/php5/*/php.ini 中默认时间也是 1440 秒，所以非常的麻烦修改三个文件。
最简单的设置session超时时间 直接修改 /usr/lib/php5/maxlifetime
 echo $time
 这个 $time 就是你设置的超时分钟。</description>
    </item>
    
    <item>
      <title>SSL Session 和 Session Tickets</title>
      <link>https://trree.github.io/geek/posts/ssl-session/</link>
      <pubDate>Sun, 16 Oct 2016 11:00:00 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/ssl-session/</guid>
      <description>背景 在对http和https性能比较的时候，可以发现http性能比https高出几个数量级。 因为https使用了tls/SSL协议，客户端与服务端进行ssl握手， 在握手的时候需要进行密钥协商，密钥交换，身份认证等过程，尤其是在 这中间必须要传递证书确定身份。
为了在安全和性能之间寻找一个平衡点，SSL Session 是解决这个问题的一个方法。 SSL Session的安全性是建立在必需要获取整个 Session ，只是获取明文传输的的 Session ID 是无法握手成功的，Session是缓存在客户端中，要窃取客户端的Session 是非常困难的。
SSLSessionTickets在apache中是默认开启的。如果需要关闭必须加上 SSLSessionTickets Off。
Client Server ClientHello (SessionTicket extension) --------&amp;gt; ServerHello (empty SessionTicket extension) NewSessionTicket [ChangeCipherSpec] &amp;lt;-------- Finished [ChangeCipherSpec] Finished --------&amp;gt; Application Data &amp;lt;-------&amp;gt; Application Data  测试session ticket重用  openssl s_client -connect host:port -sess_out session_file
openssl s_client -connect host:port -sess_in session_file
 第一次访问的New session
New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384 Server public key is 2048 bit Secure Renegotiation IS supported Compression: NONE Expansion: NONE No ALPN negotiated SSL-Session: Protocol : TLSv1.</description>
    </item>
    
    <item>
      <title>Apache缓存过滤及其原理</title>
      <link>https://trree.github.io/geek/posts/apache-cache/</link>
      <pubDate>Sun, 16 Oct 2016 10:59:47 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/apache-cache/</guid>
      <description>背景 apche 提供了cache的功能，能够将应用服务端的资源缓存在apache中， 尤其是在apache是代理服务器，原始服务器的物理距离非常远的时候， 性能就能够非常好的体现。
所以此时的网关服务器也可以作为缓存服务器使用。 因为公司使用的是apache2.0系列的。 所以在它那里发现它只支持URL的strcasecmp匹配。 所以匹配所有的URL为 &amp;lsquo;/&amp;lsquo;。但是我们希望提供普遍的过滤功能。 只缓存 .jpg,.png,.css 等不变的内容。而将经常需要改成的 .html , .js 不缓存。
所以我们的方案是在 cacheenable 中增加一个可变参数，正则配置的参数。 当正则匹配存在的时候，只使用正则批准，如果不存在，则使用原来的 url的匹配。保证与原2.0的兼容性。
网关cache原理  不存在缓存的时候，客户端发送请求给网关，网关再向后端发送请求，然后返回给网关，网关返回给客户端。 存在缓存的时候，首先，mod_cache将是一个URL映射模块，也就是说，如果一个URL已经被缓存并且这个缓存尚未失效，该请求将由mod_cache直接处理。这也意味着在处理一个请求时通常还要发生的其他阶段：比如权限验证，mod_proxy或mod_rewrite处理的阶段，将不会发生。网关可以直接返回内容给客户端。  cache 类型 mem 基于mem缓存,在高级设置中已经实现，填入mem会产生配置如下
CacheEnable mem MCacheSize 4096 MCacheMaxObjectCount 4 MCacheMinObjectSize 1 MCacheMaxObjectSize 1048576  disk 基于disk缓存，需要另外填写配置文件
CacheDefaultExpire 3600 CacheEnable disk / CacheRoot /tmp/apacheCache CacheDirLevels 3 CacheDirLength 4 CacheMaxFileSize 1048576 CacheMinFileSize 10  ramdisk实现方案 基于disk缓存，将CacheRoot设置为内存盘目录，开机的时候自动建立整个内存的10%用于存放缓存。 ​
缓存文件 在CacheRoot的目录下，生成带后缀的缓存文件.data 和 .header。 可以使用strings命令查看文件 .data保存了缓存文件内容 .</description>
    </item>
    
    <item>
      <title>工具</title>
      <link>https://trree.github.io/geek/posts/tools/</link>
      <pubDate>Sun, 16 Oct 2016 10:18:19 +0000</pubDate>
      
      <guid>https://trree.github.io/geek/posts/tools/</guid>
      <description>都说好的工具是成功的一半，并且好的工具对提升效率有非常大的帮助，所以在这里推荐一啊下好玩的工具。
windows软件 - zeal(Mac dash) API 查看工具 - typrora makrdown所见即所得工具 - launch 快速启动工具 - everything 快速文档搜索工具 - bash on-my-zsh
在线工具 - processon - workflowy - google analyze - baidu analyze - google drive
blog
 hexo  翻墙 - XX-Net</description>
    </item>
    
  </channel>
</rss>